/*** @author admin*//*	Here, we add the "onconnect" function to this worker (== to this .js file)	It's in this function that we receive messages from other threads, other workers,	asking us to do something*/function onconnect(msg) {	// In a SharedWorker, we get the communication port in evt.ports[0]    var thePort = msg.ports[0];		thePort.onmessage = function(messageEvt)    {    	//var sessionRef = currentSession(); // Get session.		//var promoteToken = sessionRef.promoteWith("Administrator"); //temporarily make this session Admin level.		// The message is in the "data" member of the argument		var message = messageEvt.data;       	// The caller is supposed to have set a "what" property, to tell us what		// he wants us to do. We dispatch the message and act accordingly.		// Notice that the caller can set more properties in messageEvt.    	    	switch(message.what)    	{    		case 'wak5crmEmailTest':			var username = 'wakandaptodemo'; // enter a valid account here			var password = 'wakandave';  // enter a valid password here			var address = 'smtp.gmail.com';			var port = 465;  // SSL port			var mail = require('waf-mail/mail');			//var recip = "dave@wakanda.org";			var recip = message.to;						var mailMessage = new mail.Mail();			mailMessage.setBodyType("text/html");			mailMessage.from= username + '@gmail.com';			mailMessage.to=recip;			//mailMessage.subject = "Wakanda 5 CRM";			mailMessage.subject = message.subject;			mailMessage.setBody('<html><b>This is an email from another Dave Robbins Wakanda Toy Application.</b><br/><br/>' + '</html>'); 			mailMessage.send(address, port , true, username, password);			break;						case "stop":			thePort.postMessage({responseType: "close"});			close();			break;						default:			thePort.postMessage({responseType: "default"});			break;    		    	} //end - switch(message.what).	} //end - thePort.onmessage().} //onconnect