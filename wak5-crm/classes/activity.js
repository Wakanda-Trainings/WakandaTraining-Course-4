//Creating the Activity classmodel.Activity = new DataClass("Activities");//Add Activity attributes.model.Activity.ID = new Attribute("storage", "long", "key auto");model.Activity.subject = new Attribute("storage", "string", "btree");model.Activity.due = new Attribute("storage", "date");model.Activity.dueDateString = new Attribute("storage", "string");model.Activity.status = new Attribute("storage", "string", "btree");model.Activity.priority = new Attribute("storage", "string", "btree");model.Activity.type = new Attribute("storage", "string");model.Activity.linkText = new Attribute("calculated", "string");model.Activity.owner = new Attribute("relatedEntity", "User", "User"); // relation to the User classmodel.Activity.contact = new Attribute("relatedEntity", "Contact", "Contact"); // relation to the Contact classmodel.Activity.lead = new Attribute("relatedEntity", "Lead", "Lead"); // relation to the Lead classmodel.Activity.account = new Attribute("relatedEntity", "Account", "Account"); // relation to the Account class//Calculated Attributes.model.Activity.linkText.onGet = function() {	var linkText = "";		if (this.lead) {		linkText = "Lead: " + this.lead.fullName;	}		if (this.contact) {		linkText = "Contact: " + this.contact.fullName;	}		if (this.account) {		linkText = "Account: " + this.account.name;	}	return linkText; };//Eventsmodel.Activity.events = {};//Note: Bug.model.Activity.events.onRestrictingQuery = function() {	var myCurrentUser = currentUser(), // we get the user of the current session.		sessionRef = currentSession(), // Get session.		result;			result = ds.Activity.createEntityCollection(); //default to empty collection.		if (sessionRef.belongsTo("Administrator") || sessionRef.belongsTo("Manager")) {		result = ds.Activity.all();	} else {		result = ds.Activity.query("owner.ID = :1", myCurrentUser.ID);	}		return result;	} //end - onRestrictingQuery();	model.Activity.events.onInit = function() {	var myCurrentUser = currentUser(), // we get the user of the current session.		myUser = ds.User.find("ID = :1", myCurrentUser.ID);			if ((myCurrentUser !== null) && (myUser !== null)) {//if a user is logged in.				this.owner = myUser;	}		this.status = "Not Started";	this.priority = "Normal";	this.due = new Date();}; //end - onInit().model.Activity.events.onSave = function() {	var theClass = this.getDataClass(), //get the dataclass of the entity to save		theClassName = theClass.getName(), //get the dataclass name		oldEntity = theClass(this.getKey()); //find the same entity on disk		if (this.isNew()) {			var theDate = new Date(this.dueDateString);			this.due = theDate;		} else {			if (this.dueDateString !== oldEntity.dueDateString) {				var theDate = new Date(this.dueDateString);				this.due = theDate;			}		}};